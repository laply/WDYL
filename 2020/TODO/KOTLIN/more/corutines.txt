corutine

1. 협력형 멀티 테스킹
2. 동시성 프로그래밍 지원 
3. 비동기 처리를 쉽게 도와줌

협력형 멀티테스킹 
Co + Routine

Routine 
    > main Routine
    > sub Routine
서브 루틴에 진입하는 지범과 루틴을 빠져나오는 지점이 명확

Co Routine
    하나의 함수에 진입할 수 있는 진입점도 다양, 탈출점도 다양하다.
return 문이나 마지막 괄호를 만나지 않더라도 중간에 언제든 나갈 수 있고,
언제든지 다시 나갔던 그 지점으로 들어올 수 있다.

fun drawPerson() {
    startCoroutine{
        drawHead()
        drawBody()
    }
}

suspend fun drawHead(){
    delay(2000)
    ...
}
suspend fun drawBody(){
    delay(2000)
    ...
}
1. 쓰레드 main 함수가 drawPerson() 호출하면 하나의 코루틴 블럭(함수)이 생성된다.
    drawPerson()은 언제든 진입, 탈출할 수 있는 자격이 주어진다.

2. 코루틴 함수가 실행되는 과정에서 suspend 키워드를 가진 함수를 만나게 되면,
    더이상 아래 코드를 실행하지 않고 멈추고 코루틴 block을 탈출한다. 

3. 메인 스레드의 다른코드들이 실행됨, but head는 어디선가 계속 그려지고 있음

4. 다른 코드들이 실행되다가도, drawHead가 끝이나면 다시 코루틴으로 진입해 아까 멈춘 부분
    아래부터 다시 실행된다.

suspend로 선언된 함수를 만나면 코루틴 밖으로 잠시 나갈 수 있다.

순서
1. 쓰레드의 main 함수가 drawPerson()을 호출하면 startCoroutine 블럭을 만나 코루틴이된다.
(정확하게는 하나의 코루틴을 만들어 시작한다). 위에도 말했듯이 이제 drawPerson()은 진입점과 탈출점이
여러개 되는 자격이 주어진것.

2. 코루틴이 실행되었지만, suspend를 만나기 전까지는 그다지 특별한 힘이 없다. suspend로 정의된 함수가
없다면 그냥 실행, but drawHead()는 suspend 키워드로 정의 된 함수이므로 drawHead()부분에서 더 이상 
아래코드를 실행하지 않고 drawPerson()이라는 코루틴 함수를 잠시 탈출한다.

3. 탈출한 메인 스레드는 다른 일을 하고 있고, Head는 어디선가 계속 돌아가고 있다. 
동시성 프로그래밍으로 작동 하고 있을수도 있고, 다른 쓰레드에서 돌아가고 있을 수 있다. 

4. 메인쓰레드가 다른 코드를 실행하다가도 drawHead() 가 제 역활을 다 끝내면 다시 아까 탈출했던
코루틴 drawPerson()으로 돌아온다. 아까 멈추어놓았던 drawHead() 부터 재개된다.

동시성 프로그래밍 

 함수를 중간에 빠져나왔다가, 다른 함수에 진입하고, 다시 원점으로 돌아와 멈추었던 부분부터 다시 시작하는
 이 특성은 동시성 프로그래밍을 가능하게 한다.

 kotlin + coroutine 

suspend A(data: Data{
    val a = data
    try {
        val b = afunction(a)
        val c = bfunction(b)
        val d = cfunction(c)

        d.prosessingA()
    }  catch (e: Exception){
        error()
    }
}

A 함수가
afunction 함수를 만나면 이를 실행함과 동시에 잠시 A를 빠져나간다.
그 후 afunction이 끝나면 다시 goCompany로 돌아올 수 있기 때문 

